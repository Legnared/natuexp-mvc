<?php

namespace Model;

class ActiveRecord
{
    // Base DE DATOS
    protected static $db;
    protected static $tabla = '';
    protected static $columnasDB = [];

    // Alertas y Mensajes
    protected static $alertas = [];
    
    // Condiciones de búsqueda
    protected static $whereConditions = [];
    protected static $orWhereConditions = [];
    
    // Definir la conexión a la BD - includes/database.php
    public static function setDB($database)
    {
        self::$db = $database;
    }

    public static function getDB() { 
        return self::$db;
    }
    
    // Setear un tipo de Alerta
    public static function setAlerta($tipo, $mensaje)
    {
        static::$alertas[$tipo][] = $mensaje;
    }

    // Obtener las alertas
    public static function getAlertas()
    {
        return static::$alertas;
    }

    // Validación que se hereda en modelos
    public function validar()
    {
        static::$alertas = [];
        return static::$alertas;
    }

    // Consultar SQL
    public static function consultarSQL($query) {
        $resultado = self::$db->query($query);
        $array = [];
        while ($registro = $resultado->fetch_assoc()) {
            $array[] = static::crearObjeto($registro);
        }
        $resultado->free();
        return $array;
    }

    // Crear objeto
    protected static function crearObjeto($registro) {
        $objeto = new static;
        foreach ($registro as $key => $value) {
            if (property_exists($objeto, $key)) {
                $objeto->$key = $value;
            }
        }
        return $objeto;
    }

    // Atributos
    public function atributos() {
        $atributos = [];
        foreach (static::$columnasDB as $columna) {
            if ($columna === 'id') continue;
            $atributos[$columna] = $this->$columna;
        }
        return $atributos;
    }

    // Sanitizar atributos
    public function sanitizarAtributos() {
        $atributos = [];
        foreach(static::$columnasDB as $columna) {
            if(!is_null($this->$columna)) {
                $atributos[$columna] = self::$db->escape_string($this->$columna);
            }
        }
        return $atributos;
    }
    
    // Sincronizar atributos
    public function sincronizar($args = []) {
        foreach ($args as $key => $value) {
            if (property_exists($this, $key) && !is_null($value)) {
                $this->$key = $value;
            }
        }
    }

    // Guardar
    public function guardar() {
        if (!is_null($this->id)) {
            return $this->actualizar();
        } else {
            return $this->crear();
        }
    }

    // Crear
    public function crear() {
        $atributos = $this->sanitizarAtributos();
        $campos = join(', ', array_keys($atributos));
        $valores = join(', ', array_fill(0, count($atributos), '?'));
        $query = "INSERT INTO " . static::$tabla . " ($campos) VALUES ($valores)";
        $stmt = self::$db->prepare($query);
        $tipos = str_repeat('s', count($atributos));
        $params = array_values($atributos);
        $stmt->bind_param($tipos, ...$params);
        $resultado = $stmt->execute();
        if ($resultado) {
            $this->id = self::$db->insert_id;
        }
        return $resultado;
    }

    // Actualizar
    public function actualizar() {
        $atributos = $this->sanitizarAtributos();
        $valores = [];
        $tipos = '';
        foreach ($atributos as $key => $value) {
            $valores[] = "{$key}=?";
            $tipos .= 's';
        }
        $query = "UPDATE " . static::$tabla . " SET " . join(', ', $valores) . " WHERE id=? LIMIT 1";
        $stmt = self::$db->prepare($query);
        $params = array_values($atributos);
        $params[] = $this->id;
        $tipos .= 'i';
        $stmt->bind_param($tipos, ...$params);
        return $stmt->execute();
    }

    // Obtener todos
    public static function all() {
        $query = "SELECT * FROM " . static::$tabla . " ORDER BY id DESC";
        return self::consultarSQL($query);
    }

    // Obtener todos descendente
    public static function allDesc($orden = 'DESC') {
        $query = "SELECT * FROM " . static::$tabla . " ORDER BY id ${orden}";
        return self::consultarSQL($query);
    }

    // Buscar por id
    public static function find($id) {
        $query = "SELECT * FROM " . static::$tabla  . " WHERE id = ${id}";
        $resultado = self::consultarSQL($query);
        return array_shift($resultado);
    }

    // Obtener registros con límite
    public static function get($limite) {
        $query = "SELECT * FROM " . static::$tabla . " LIMIT ${limite}";
        return self::consultarSQL($query);
    }

    // Paginar registros
    public static function paginar($por_pagina, $offset) {
        $query = "SELECT * FROM " . static::$tabla . " ORDER BY id DESC LIMIT ${por_pagina} OFFSET ${offset}";
        return self::consultarSQL($query);
    }

    // Buscar con condiciones WHERE
    public static function where($columna, $valor) {
        $query = "SELECT * FROM " . static::$tabla . " WHERE ${columna} = '${valor}'";
        $resultado = self::consultarSQL($query);
        return array_shift($resultado);
    }

    // Buscar con condiciones WHERE flexibles
    public static function whereFlexible($columna, $valor) {
        $query = "SELECT * FROM " . static::$tabla . " WHERE ${columna} = ?";
        $stmt = self::$db->prepare($query);
        $stmt->bind_param('s', $valor);
        $stmt->execute();
        $resultado = $stmt->get_result();
        return static::crearObjeto($resultado->fetch_assoc());
    }

    // Buscar todos los resultados con WHERE
    public static function whereAll($columna, $valor) {
        $query = "SELECT * FROM " . static::$tabla . " WHERE ${columna} = '${valor}'";
        return self::consultarSQL($query);
    }

    // Buscar con JOIN
    public static function consultarConJoin($query) {
        $resultado = self::$db->query($query);
        $array = [];
        while ($registro = $resultado->fetch_assoc()) {
            $array[] = static::crearObjetoConJoin($registro);
        }
        $resultado->free();
        return $array;
    }

    // Buscar con JOIN dinámico
    public static function consultarConJoinDinamico($query, $clase) {
        $resultado = self::$db->query($query);
        if (!$resultado) {
            die('Error al ejecutar la consulta: ' . self::$db->error);
        }
        $array = [];
        while ($registro = $resultado->fetch_assoc()) {
            $objeto = static::crearObjetoConJoin($registro, $clase);
            $array[] = $objeto;
        }
        $resultado->free();
        return $array;
    }

    // Crear objeto con JOIN
    protected static function crearObjetoConJoin($registro) {
        $objeto = new static;
        foreach ($registro as $key => $value) {
            if (property_exists($objeto, $key)) {
                $objeto->$key = $value;
            }
        }
        return $objeto;
    }

    // Crear con JOIN
    public function crearConJoin($tabla_join, $columnas_join, $valores_join) {
        $atributos = $this->sanitizarAtributos();
        $query = "INSERT INTO " . static::$tabla . " ( ";
        $query .= join(', ', array_keys($atributos));
        $query .= ", " . $columnas_join . " ) VALUES (' ";
        $query .= join("', '", array_values($atributos));
        $query .= " ', '" . $valores_join . "')";
        $resultado = self::$db->query($query);
        return [
            'resultado' =>  $resultado,
            'id' => self::$db->insert_id
        ];
    }

    // Actualizar con JOIN
    public function actualizarConJoin($tabla_join, $columnas_join, $valores_join) {
        $atributos = $this->sanitizarAtributos();
        $valores = [];
        foreach ($atributos as $key => $value) {
            $valores[] = "{$key}=?";
        }
        $query = "UPDATE " . static::$tabla . " SET " . join(', ', $valores);
        $query .= " WHERE id = ? AND " . $columnas_join . " = ?";
        $stmt = self::$db->prepare($query);
        $tipos = str_repeat('s', count($atributos)) . 'i';
        $params = array_values($atributos);
        $params[] = $this->id;
        $params[] = $valores_join;
        $stmt->bind_param($tipos, ...$params);
        return $stmt->execute();
    }

    // Donde con OR
    public static function orWhere($columna1, $valor1, $columna2, $valor2) {
        self::$orWhereConditions[] = "(${columna1} = '${valor1}' OR ${columna2} = '${valor2}')";
    }

    // Buscar todos con condiciones WHERE y OR
    public static function whereOr() {
        $query = "SELECT * FROM " . static::$tabla;
        if (!empty(self::$whereConditions) || !empty(self::$orWhereConditions)) {
            $query .= " WHERE ";
            $query .= join(' AND ', self::$whereConditions);
            if (!empty(self::$orWhereConditions)) {
                if (!empty(self::$whereConditions)) {
                    $query .= " AND ";
                }
                $query .= join(' OR ', self::$orWhereConditions);
            }
        }
        self::$whereConditions = [];
        self::$orWhereConditions = [];
        return self::consultarSQL($query);
    }

    // Obtener el primer resultado
    public static function first() {
        $query = "SELECT * FROM " . static::$tabla . " LIMIT 1";
        $resultado = self::consultarSQL($query);
        return array_shift($resultado);
    }
}
